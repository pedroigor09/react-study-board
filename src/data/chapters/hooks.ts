import { ChapterData } from '@/types';

export const hooksChapter: ChapterData = {
  id: 'hooks-chapter',
  title: 'üé£ useState vs useEffect',
  description: 'Dominando os hooks mais importantes do React',
  backgroundColor: 'bg-gradient-to-br from-green-50 to-emerald-100',
  cards: [
    {
      id: 'usestate-concept',
      title: 'useState - Estado Local',
      description: 'O hook fundamental para gerenciar estado em componentes',
      category: 'hooks',
      color: 'bg-green-100 border-green-300',
      position: { x: 150, y: 200 },
      connections: ['usestate-problems', 'useeffect-concept'],
      code: {
        language: 'typescript',
        example: `function Counter() {
  // useState retorna [valor, setter]
  const [count, setCount] = useState(0);
  const [name, setName] = useState('');
  
  // Estados podem ser qualquer tipo
  const [user, setUser] = useState({ id: 1, name: 'Jo√£o' });
  const [items, setItems] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  
  return (
    <div>
      <p>Contador: {count}</p>
      <button onClick={() => setCount(count + 1)}>
        Incrementar
      </button>
      <input 
        value={name}
        onChange={(e) => setName(e.target.value)}
        placeholder="Digite seu nome"
      />
    </div>
  );
}`,
        explanation: `üéì ENTENDA O useState:

üí° **O QUE √â**:
‚Ä¢ Hook que adiciona estado a componentes funcionais
‚Ä¢ Substitui this.state em componentes de classe
‚Ä¢ Mant√©m valores entre re-renderiza√ß√µes

‚úÖ **VANTAGENS**:
‚Ä¢ Sintaxe simples e intuitiva
‚Ä¢ Pode ter m√∫ltiplos estados por componente
‚Ä¢ Aceita qualquer tipo de dado (string, number, object, array)
‚Ä¢ Re-renderiza apenas quando estado muda

üìä **COMO FUNCIONA**:
‚Ä¢ useState(valorInicial) ‚Üí [estado, setEstado]
‚Ä¢ setEstado(novoValor) ‚Üí dispara re-renderiza√ß√£o
‚Ä¢ React compara valores com Object.is()

üéØ **QUANDO USAR**:
‚Ä¢ Dados que mudam ao longo do tempo
‚Ä¢ Inputs de formul√°rios (controlled components)
‚Ä¢ Toggles, contadores, flags de loading
‚Ä¢ Estados locais do componente`
      },
      icon: 'üìä'
    },
    {
      id: 'usestate-problems',
      title: 'useState - Problemas & Solu√ß√µes',
      description: 'Armadilhas comuns e como evit√°-las',
      category: 'hooks',
      color: 'bg-red-100 border-red-300',
      position: { x: 150, y: 450 },
      connections: ['usestate-best-practices'],
      code: {
        language: 'typescript',
        example: `// ‚ùå ERRO 1: Muta√ß√£o direta
const [items, setItems] = useState([]);
const addItem = (item) => {
  items.push(item); // NUNCA fa√ßa isso!
  setItems(items); // React n√£o detecta mudan√ßa
};

// ‚úÖ SOLU√á√ÉO: Imutabilidade
const addItem = (item) => {
  setItems([...items, item]); // Novo array
  // ou setItems(prev => [...prev, item]);
};

// ‚ùå ERRO 2: Estado desatualizado
const increment = () => {
  setCount(count + 1);
  setCount(count + 1); // Ainda ser√° count + 1!
};

// ‚úÖ SOLU√á√ÉO: Callback function
const increment = () => {
  setCount(prev => prev + 1);
  setCount(prev => prev + 1); // Agora ser√° count + 2!
};

// ‚ùå ERRO 3: Objetos aninhados
const [user, setUser] = useState({ profile: { name: '' }});
const updateName = (name) => {
  user.profile.name = name; // Muta√ß√£o!
  setUser(user);
};

// ‚úÖ SOLU√á√ÉO: Spread operator
const updateName = (name) => {
  setUser(prev => ({
    ...prev,
    profile: { ...prev.profile, name }
  }));
};`,
        explanation: `‚ö†Ô∏è **PROBLEMAS COMUNS**:

üö´ **MUTA√á√ÉO DIRETA**:
‚Ä¢ React usa Object.is() para comparar
‚Ä¢ Muta√ß√£o n√£o cria novo objeto ‚Üí sem re-render
‚Ä¢ SEMPRE crie novo estado

üîÑ **ESTADO DESATUALIZADO**:
‚Ä¢ Estado √© "snapshot" do momento do render
‚Ä¢ M√∫ltiplas chamadas usam o mesmo valor
‚Ä¢ Use callback para valor atual: setCount(prev => prev + 1)

üóÇÔ∏è **OBJETOS COMPLEXOS**:
‚Ä¢ Spread operator para criar c√≥pias
‚Ä¢ Bibliotecas como Immer para facilitar
‚Ä¢ Considere m√∫ltiplos useState para objetos grandes

‚ö° **PERFORMANCE**:
‚Ä¢ useState dispara re-render mesmo com valor igual
‚Ä¢ Use useMemo/useCallback para otimizar
‚Ä¢ Considere useReducer para estados complexos`
      },
      icon: '‚ö†Ô∏è'
    },
    {
      id: 'usestate-best-practices',
      title: 'useState - Boas Pr√°ticas',
      description: 'Como usar useState de forma eficiente',
      category: 'hooks',
      color: 'bg-emerald-100 border-emerald-300',
      position: { x: 150, y: 700 },
      code: {
        language: 'typescript',
        example: `// ‚úÖ PR√ÅTICA 1: Estado inicial calculado
const [expensiveValue, setExpensiveValue] = useState(() => {
  // S√≥ executa uma vez, no primeiro render
  return computeExpensiveValue();
});

// ‚úÖ PR√ÅTICA 2: M√∫ltiplos estados relacionados
const [user, setUser] = useState({ name: '', email: '' });
// ao inv√©s de:
// const [name, setName] = useState('');
// const [email, setEmail] = useState('');

// ‚úÖ PR√ÅTICA 3: Custom hook para l√≥gica complexa
function useCounter(initialValue = 0) {
  const [count, setCount] = useState(initialValue);
  
  const increment = useCallback(() => {
    setCount(prev => prev + 1);
  }, []);
  
  const decrement = useCallback(() => {
    setCount(prev => prev - 1);
  }, []);
  
  const reset = useCallback(() => {
    setCount(initialValue);
  }, [initialValue]);
  
  return { count, increment, decrement, reset };
}

// ‚úÖ PR√ÅTICA 4: Valida√ß√£o de tipos com TypeScript
interface User {
  id: number;
  name: string;
  email: string;
}

const [user, setUser] = useState<User | null>(null);`,
        explanation: `üèÜ **BOAS PR√ÅTICAS**:

‚ö° **INICIALIZA√á√ÉO LAZY**:
‚Ä¢ Use fun√ß√£o para c√°lculos pesados
‚Ä¢ useState(() => calcular()) vs useState(calcular())
‚Ä¢ Primeira executa uma vez, segunda sempre

üéØ **AGRUPAMENTO INTELIGENTE**:
‚Ä¢ Estados relacionados ‚Üí um objeto
‚Ä¢ Estados independentes ‚Üí separados
‚Ä¢ Facilita updates e manuten√ß√£o

üîß **CUSTOM HOOKS**:
‚Ä¢ Extraia l√≥gica reutiliz√°vel
‚Ä¢ Teste separadamente
‚Ä¢ Melhora legibilidade

üõ°Ô∏è **TYPESCRIPT**:
‚Ä¢ Defina interfaces para estados complexos
‚Ä¢ Use unions: useState<User | null>
‚Ä¢ Evite any - seja espec√≠fico`
      },
      icon: '‚úÖ'
    },
    {
      id: 'useeffect-concept',
      title: 'useEffect - Side Effects',
      description: 'O hook para efeitos colaterais e lifecycle',
      category: 'hooks',
      color: 'bg-orange-100 border-orange-300',
      position: { x: 550, y: 200 },
      connections: ['useeffect-dependencies', 'useeffect-cleanup'],
      code: {
        language: 'typescript',
        example: `import { useState, useEffect } from 'react';

function UserProfile({ userId }) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Effect para buscar dados
  useEffect(() => {
    let cancelled = false;
    
    async function fetchUser() {
      try {
        setLoading(true);
        setError(null);
        
        const response = await api.get(\`/users/\${userId}\`);
        
        // Evita race condition
        if (!cancelled) {
          setUser(response.data);
        }
      } catch (err) {
        if (!cancelled) {
          setError(err.message);
        }
      } finally {
        if (!cancelled) {
          setLoading(false);
        }
      }
    }
    
    fetchUser();
    
    // Cleanup para cancelar requisi√ß√£o
    return () => {
      cancelled = true;
    };
  }, [userId]); // Re-executa quando userId muda
  
  if (loading) return <div>Carregando...</div>;
  if (error) return <div>Erro: {error}</div>;
  return user ? <h1>{user.name}</h1> : null;
}`,
        explanation: `üéì ENTENDA O useEffect:

‚ö° **O QUE √â**:
‚Ä¢ Hook para "efeitos colaterais" (side effects)
‚Ä¢ Substitui componentDidMount, componentDidUpdate, componentWillUnmount
‚Ä¢ Executa ap√≥s o DOM ser atualizado

‚úÖ **PRINCIPAIS USOS**:
‚Ä¢ Buscar dados de APIs
‚Ä¢ Configurar timers e intervalos
‚Ä¢ Adicionar/remover event listeners
‚Ä¢ Manipular DOM diretamente
‚Ä¢ Cleanup de recursos

üìä **TIMING DE EXECU√á√ÉO**:

1. **Componente renderiza** ‚Üí HTML √© atualizado no DOM
2. **useEffect executa** ‚Üí Depois que o DOM est√° pronto
3. **Depend√™ncias mudam** ‚Üí Effect executa novamente
4. **Componente desmonta** ‚Üí Cleanup function executa

üéØ **VANTAGENS**:
‚Ä¢ N√£o bloqueia renderiza√ß√£o (ass√≠ncrono)
‚Ä¢ Centraliza l√≥gica de side effects
‚Ä¢ F√°cil de testar e debuggar
‚Ä¢ Cleanup autom√°tico previne memory leaks`
      },
      icon: '‚ö°'
    },
    {
      id: 'useeffect-dependencies',
      title: 'Array de Depend√™ncias - Guia Completo',
      description: 'Domine o controle de quando effects executam',
      category: 'hooks',
      color: 'bg-blue-100 border-blue-300',
      position: { x: 400, y: 400 },
      connections: ['useeffect-advanced'],
      code: {
        language: 'typescript',
        example: `// üîÑ CEN√ÅRIO 1: Executa sempre (sem array)
useEffect(() => {
  console.log('Executa a cada render');
  document.title = \`Contagem: \${count}\`;
}); // ‚ö†Ô∏è Cuidado: pode causar loops infinitos

// üöÄ CEN√ÅRIO 2: Executa uma vez (array vazio)
useEffect(() => {
  console.log('Executa s√≥ no mount');
  // Setup inicial, event listeners globais
  const handleResize = () => setWindowSize(window.innerWidth);
  window.addEventListener('resize', handleResize);
  
  return () => {
    window.removeEventListener('resize', handleResize);
  };
}, []); // ‚úÖ Array vazio = componentDidMount + componentWillUnmount

// üéØ CEN√ÅRIO 3: Executa quando depend√™ncias mudam
useEffect(() => {
  console.log('userId mudou:', userId);
  fetchUserData(userId);
}, [userId]); // ‚úÖ Re-executa quando userId muda

// üîß CEN√ÅRIO 4: M√∫ltiplas depend√™ncias
useEffect(() => {
  if (userId && isAuthenticated) {
    fetchPrivateUserData(userId, authToken);
  }
}, [userId, isAuthenticated, authToken]);

// ‚ùå ERRO COMUM: Depend√™ncia esquecida
useEffect(() => {
  fetchData(endpoint, filters); // filters est√° sendo usado...
}, [endpoint]); // ...mas n√£o est√° nas depend√™ncias!

// ‚úÖ CORRETO: Todas as depend√™ncias inclu√≠das
useEffect(() => {
  fetchData(endpoint, filters);
}, [endpoint, filters]); // ‚úÖ ESLint te ajuda com isso!`,
        explanation: `üéØ **GUIA DE DEPEND√äNCIAS**:

üìù **REGRA DE OURO**:
‚Ä¢ Todas as vari√°veis do componente usadas no effect
‚Ä¢ Props, state, fun√ß√µes criadas no componente
‚Ä¢ ESLint plugin: eslint-plugin-react-hooks te ajuda

üîÑ **TIPOS DE ARRAY**:

üö´ **Sem Array**: useEffect(() => {})
‚Ä¢ Executa ap√≥s EVERY render
‚Ä¢ Geralmente √© um BUG
‚Ä¢ Use apenas para logs/debugging

‚ö° **Array Vazio**: useEffect(() => {}, [])
‚Ä¢ Executa apenas uma vez (mount)
‚Ä¢ Ideal para: setup inicial, timers globais
‚Ä¢ Equivale a componentDidMount

üéØ **Com Depend√™ncias**: useEffect(() => {}, [dep1, dep2])
‚Ä¢ Executa quando qualquer depend√™ncia muda
‚Ä¢ React usa Object.is() para comparar
‚Ä¢ Objetos/arrays s√£o comparados por refer√™ncia

‚ö†Ô∏è **PROBLEMAS COMUNS**:
‚Ä¢ Depend√™ncia esquecida ‚Üí effect n√£o re-executa
‚Ä¢ Refer√™ncia muda sempre ‚Üí loop infinito
‚Ä¢ useCallback/useMemo para estabilizar refer√™ncias`
      },
      icon: 'üîó'
    },
    {
      id: 'useeffect-cleanup',
      title: 'Cleanup - Evitando Memory Leaks',
      description: 'Como limpar recursos e prevenir vazamentos',
      category: 'hooks',
      color: 'bg-purple-100 border-purple-300',
      position: { x: 700, y: 400 },
      connections: ['useeffect-advanced'],
      code: {
        language: 'typescript',
        example: `// üßπ CLEANUP PATTERN B√ÅSICO
useEffect(() => {
  // 1. Setup: criar recurso
  const timer = setInterval(() => {
    console.log('Timer executando...');
  }, 1000);
  
  // 2. Cleanup: limpar recurso
  return () => {
    clearInterval(timer);
  };
}, []);

// üåê CLEANUP: Event Listeners
useEffect(() => {
  const handleScroll = () => {
    console.log('Scroll position:', window.scrollY);
  };
  
  const handleKeyPress = (e) => {
    if (e.key === 'Escape') setShowModal(false);
  };
  
  // Setup
  window.addEventListener('scroll', handleScroll);
  document.addEventListener('keydown', handleKeyPress);
  
  // Cleanup
  return () => {
    window.removeEventListener('scroll', handleScroll);
    document.removeEventListener('keydown', handleKeyPress);
  };
}, [setShowModal]);

// üîÑ CLEANUP: Requisi√ß√µes (AbortController)
useEffect(() => {
  const controller = new AbortController();
  
  async function fetchData() {
    try {
      const response = await fetch('/api/data', {
        signal: controller.signal // ‚úÖ Conecta com AbortController
      });
      const data = await response.json();
      setData(data);
    } catch (error) {
      if (error.name === 'AbortError') {
        console.log('Requisi√ß√£o cancelada');
      } else {
        setError(error.message);
      }
    }
  }
  
  fetchData();
  
  // Cleanup: cancela requisi√ß√£o pendente
  return () => {
    controller.abort();
  };
}, []);

// üì° CLEANUP: WebSocket
useEffect(() => {
  const ws = new WebSocket('ws://localhost:8080');
  
  ws.onmessage = (event) => {
    const message = JSON.parse(event.data);
    setMessages(prev => [...prev, message]);
  };
  
  ws.onerror = (error) => {
    console.error('WebSocket error:', error);
  };
  
  // Cleanup: fechar conex√£o
  return () => {
    ws.close();
  };
}, []);`,
        explanation: `üßπ **POR QUE CLEANUP √â CRUCIAL**:

üí£ **MEMORY LEAKS COMUNS**:
‚Ä¢ Timers que continuam rodando
‚Ä¢ Event listeners n√£o removidos  
‚Ä¢ Requisi√ß√µes que ainda executam
‚Ä¢ WebSockets/connections abertas

‚úÖ **RECURSOS QUE PRECISAM CLEANUP**:
‚Ä¢ setInterval/setTimeout
‚Ä¢ Event listeners (window, document)
‚Ä¢ Requisi√ß√µes HTTP cancel√°veis
‚Ä¢ WebSockets, EventSource
‚Ä¢ Observadores (Intersection, Mutation, Resize)

üîÑ **QUANDO CLEANUP EXECUTA**:
‚Ä¢ Antes do pr√≥ximo effect (se depend√™ncias mudaram)
‚Ä¢ Quando componente desmonta (unmount)
‚Ä¢ React garante que cleanup sempre execute

‚ö° **PATTERNS AVAN√áADOS**:
‚Ä¢ AbortController para requisi√ß√µes
‚Ä¢ Flags booleanas (let cancelled = false)
‚Ä¢ Custom hooks para encapsular cleanup
‚Ä¢ Libraries como use-async-effect

üéØ **DICA DE PERFORMANCE**:
‚Ä¢ Cleanup pesado pode travar unmount
‚Ä¢ Use setTimeout/requestIdleCallback se necess√°rio
‚Ä¢ Mantenha cleanup simples e r√°pido`
      },
      icon: 'üßπ'
    },
    {
      id: 'useeffect-advanced',
      title: 'useEffect - Patterns Avan√ßados',
      description: 'T√©cnicas profissionais para dominar useEffect',
      category: 'hooks',
      color: 'bg-indigo-100 border-indigo-300',
      position: { x: 550, y: 650 },
      code: {
        language: 'typescript',
        example: `// üéØ PATTERN 1: Effect condicional
useEffect(() => {
  // S√≥ executa se condi√ß√µes forem verdadeiras
  if (!userId || !isAuthenticated) return;
  
  fetchUserData(userId, authToken);
}, [userId, isAuthenticated, authToken]);

// üîÑ PATTERN 2: Effect com debounce
useEffect(() => {
  const timeoutId = setTimeout(() => {
    // S√≥ executa ap√≥s 500ms sem mudan√ßas
    searchUsers(searchTerm);
  }, 500);
  
  return () => clearTimeout(timeoutId);
}, [searchTerm]);

// üìä PATTERN 3: Effect com loading states
useEffect(() => {
  let cancelled = false;
  
  async function loadData() {
    setLoading(true);
    setError(null);
    
    try {
      const data = await fetchData(params);
      if (!cancelled) {
        setData(data);
      }
    } catch (err) {
      if (!cancelled) {
        setError(err.message);
      }
    } finally {
      if (!cancelled) {
        setLoading(false);
      }
    }
  }
  
  loadData();
  
  return () => {
    cancelled = true;
  };
}, [params]);

// üéÆ PATTERN 4: Effect com ref para valores atuais
function useInterval(callback, delay) {
  const savedCallback = useRef();
  
  // Salva callback atual
  useEffect(() => {
    savedCallback.current = callback;
  }, [callback]);
  
  // Configura interval
  useEffect(() => {
    if (delay !== null) {
      const id = setInterval(() => {
        savedCallback.current(); // Sempre usa callback atual
      }, delay);
      return () => clearInterval(id);
    }
  }, [delay]);
}`,
        explanation: `üèÜ **PATTERNS PROFISSIONAIS**:

üéØ **CONDITIONAL EFFECTS**:
‚Ä¢ Early return para evitar execu√ß√£o desnecess√°ria
‚Ä¢ Reduz chamadas de API
‚Ä¢ Melhora performance

‚è±Ô∏è **DEBOUNCING**:
‚Ä¢ Evita execu√ß√µes excessivas (search, resize)
‚Ä¢ setTimeout + cleanup pattern
‚Ä¢ Libraries: use-debounce, lodash.debounce

üîÑ **RACE CONDITIONS**:
‚Ä¢ Flag 'cancelled' para evitar setState em componente desmontado
‚Ä¢ AbortController para requisi√ß√µes
‚Ä¢ Sempre cleanup async operations

üìä **LOADING STATES**:
‚Ä¢ loading/error/data pattern
‚Ä¢ Try-catch com cleanup
‚Ä¢ UX consistente

üéÆ **REFS PARA CALLBACKS**:
‚Ä¢ useRef mant√©m refer√™ncia atual
‚Ä¢ Evita re-cria√ß√£o de effects
‚Ä¢ Pattern do Dan Abramov

‚ö° **PERFORMANCE TIPS**:
‚Ä¢ M√∫ltiplos useEffect vs um grande
‚Ä¢ Custom hooks para l√≥gica complexa
‚Ä¢ useMemo para objetos nas depend√™ncias`
      },
      icon: 'üöÄ'
    }
  ],
  connections: [
    {
      id: 'usestate-to-effect',
      path: 'M 350 220 Q 450 180 550 220',
      strokeDasharray: '5,5',
      strokeDashoffset: '120',
      duration: 1.8
    },
    {
      id: 'usestate-to-problems',
      path: 'M 200 300 L 200 430',
      strokeDasharray: '3,3',
      strokeDashoffset: '60',
      duration: 1.3
    },
    {
      id: 'problems-to-best-practices',
      path: 'M 200 550 L 200 680',
      strokeDasharray: '4,4',
      strokeDashoffset: '40',
      duration: 1.2
    },
    {
      id: 'effect-to-deps',
      path: 'M 600 300 Q 550 350 450 380',
      strokeDasharray: '4,4',
      strokeDashoffset: '80',
      duration: 1.5
    },
    {
      id: 'effect-to-cleanup',
      path: 'M 650 300 Q 700 350 750 380',
      strokeDasharray: '4,4',
      strokeDashoffset: '80',
      duration: 1.5
    },
    {
      id: 'deps-to-advanced',
      path: 'M 450 500 Q 500 550 550 630',
      strokeDasharray: '5,5',
      strokeDashoffset: '100',
      duration: 1.6
    },
    {
      id: 'cleanup-to-advanced',
      path: 'M 750 500 Q 700 550 600 630',
      strokeDasharray: '5,5',
      strokeDashoffset: '100',
      duration: 1.6
    }
  ]
};
