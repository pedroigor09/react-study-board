import { ChapterData } from '@/types';

export const chapters: ChapterData[] = [
  {
    id: 'client-server',
    title: 'üåê Client vs Server',
    description: 'Entenda a diferen√ßa fundamental entre renderiza√ß√£o no cliente e no servidor',
    backgroundColor: 'bg-gradient-to-br from-blue-50 to-indigo-100',
    connections: [],
    cards: [
      {
        id: 'server-side-concept',
        title: 'Server-Side Rendering (SSR)',
        description: 'HTML √© gerado no servidor antes de ser enviado para o navegador',
        category: 'client-server',
        color: 'bg-blue-50 border-blue-200',
        position: { x: 100, y: 200 },
        connections: ['client-side-concept'],
        code: {
          language: 'typescript',
          example: `// Server-Side Rendering com Next.js
export async function getServerSideProps() {
  // Executa no servidor a cada requisi√ß√£o
  const user = await fetchUserFromDB();
  const posts = await fetchUserPosts(user.id);
  
  return {
    props: {
      user,
      posts,
      timestamp: new Date().toISOString()
    }
  };
}

export default function ProfilePage({ user, posts, timestamp }) {
  return (
    <div>
      <h1>Perfil de {user.name}</h1>
      <p>Carregado em: {timestamp}</p>
      <div>
        {posts.map(post => (
          <article key={post.id}>
            <h2>{post.title}</h2>
            <p>{post.content}</p>
          </article>
        ))}
      </div>
    </div>
  );
}`,
          explanation: `üéì ENTENDA O SSR:

üìä COMO FUNCIONA:

1. **Usu√°rio acessa a p√°gina**
   ‚Üí Requisi√ß√£o HTTP √© enviada ao servidor

2. **Servidor executa getServerSideProps()**
   ‚Üí Next.js roda fun√ß√£o antes de renderizar

3. **Busca dados do banco/API**
   ‚Üí Informa√ß√µes s√£o coletadas no servidor

4. **Gera HTML completo com dados**
   ‚Üí React renderiza a p√°gina inteira

5. **Envia HTML pronto para o navegador**
   ‚Üí Usu√°rio v√™ conte√∫do imediatamente

‚úÖ VANTAGENS:
‚Ä¢ SEO excelente - Google v√™ conte√∫do completo
‚Ä¢ Primeiro carregamento mais r√°pido
‚Ä¢ Melhor para usu√°rios com conex√£o lenta
‚Ä¢ Dados sempre atualizados

‚ùå DESVANTAGENS:
‚Ä¢ Cada p√°gina = nova requisi√ß√£o ao servidor
‚Ä¢ Pode ser mais lento em navega√ß√£o
‚Ä¢ Maior carga no servidor

üîç QUANDO USAR:
‚Ä¢ E-commerce com pre√ßos din√¢micos
‚Ä¢ Dashboards com dados em tempo real
‚Ä¢ Sites que dependem muito de SEO`
        },
        icon: 'üñ•Ô∏è'
      },
      {
        id: 'client-side-concept',
        title: 'Client-Side Rendering (CSR)',
        description: 'JavaScript executa no navegador para gerar o conte√∫do dinamicamente',
        category: 'client-server',
        color: 'bg-green-50 border-green-200',
        position: { x: 500, y: 200 },
        connections: [],
        code: {
          language: 'typescript',
          example: `// Client-Side Rendering com React
function Dashboard() {
  const [user, setUser] = useState(null);
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    // Executa no navegador ap√≥s componente montar
    async function loadData() {
      try {
        const [userRes, dataRes] = await Promise.all([
          fetch('/api/user'),
          fetch('/api/dashboard-data')
        ]);
        
        setUser(await userRes.json());
        setData(await dataRes.json());
      } catch (error) {
        console.error('Erro ao carregar dados:', error);
      } finally {
        setLoading(false);
      }
    }
    
    loadData();
  }, []);
  
  if (loading) return <LoadingSpinner />;
  
  return (
    <div>
      <h1>Dashboard - {user?.name}</h1>
      <InteractiveChart data={data} />
      <RealtimeNotifications />
    </div>
  );
}`,
          explanation: `üéì ENTENDA O CSR:

üìä COMO FUNCIONA:

1. **Servidor envia HTML b√°sico + JavaScript**
   ‚Üí P√°gina inicial vazia ou com loading

2. **Navegador executa JavaScript**
   ‚Üí React e suas depend√™ncias carregam

3. **React monta componentes**
   ‚Üí Interface come√ßa a aparecer

4. **useEffect faz requisi√ß√µes para APIs**
   ‚Üí Dados s√£o buscados dinamicamente

5. **Interface atualiza dinamicamente**
   ‚Üí Usu√°rio v√™ conte√∫do final

‚úÖ VANTAGENS:
‚Ä¢ Interface super responsiva
‚Ä¢ Transi√ß√µes suaves entre p√°ginas
‚Ä¢ Melhor para aplica√ß√µes interativas
‚Ä¢ Menos carga no servidor

‚ùå DESVANTAGENS:
‚Ä¢ SEO mais complexo
‚Ä¢ Carregamento inicial mais lento
‚Ä¢ JavaScript obrigat√≥rio

üîç QUANDO USAR:
‚Ä¢ Dashboards administrativos
‚Ä¢ Aplica√ß√µes altamente interativas
‚Ä¢ Apps internos que n√£o dependem de SEO`
        },
        icon: 'üíª'
      },
      {
        id: 'seo-benefits',
        title: 'SEO & Performance',
        description: 'Como SSR impacta indexa√ß√£o e Core Web Vitals',
        category: 'performance',
        color: 'bg-purple-50 border-purple-200',
        position: { x: 300, y: 400 },
        connections: [],
        code: {
          language: 'html',
          example: `<!-- HTML gerado pelo SSR -->
<!DOCTYPE html>
<html>
<head>
  <title>iPhone 15 Pro - Melhor Pre√ßo | TechStore</title>
  <meta name="description" content="iPhone 15 Pro 256GB por R$ 7.999. Frete gr√°tis." />
  
  <!-- Open Graph para redes sociais -->
  <meta property="og:title" content="iPhone 15 Pro - Melhor Pre√ßo" />
  <meta property="og:image" content="/iphone-15.jpg" />
  
  <!-- Schema.org para Rich Snippets -->
  <script type="application/ld+json">
  {
    "@context": "https://schema.org/",
    "@type": "Product",
    "name": "iPhone 15 Pro",
    "offers": {
      "@type": "Offer",
      "price": 7999.00,
      "priceCurrency": "BRL"
    }
  }
  </script>
</head>
<body>
  <!-- Conte√∫do vis√≠vel imediatamente -->
  <h1>iPhone 15 Pro 256GB</h1>
  <p>R$ 7.999,00 ou 12x sem juros</p>
  <img src="/iphone-15.jpg" alt="iPhone 15 Pro" />
  <p>‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (547 avalia√ß√µes)</p>
</body>
</html>`,
          explanation: `üéì SEO E PERFORMANCE:

üîç POR QUE SSR √â MELHOR PARA SEO:
‚Ä¢ Google recebe HTML completo na primeira requisi√ß√£o
‚Ä¢ Meta tags din√¢micas (pre√ßo, descri√ß√£o atual)
‚Ä¢ Structured data para Rich Snippets
‚Ä¢ Social media previews funcionam perfeitamente

‚ö° CORE WEB VITALS:
‚Ä¢ FCP (First Contentful Paint): < 1.8s
‚Ä¢ LCP (Largest Contentful Paint): < 2.5s
‚Ä¢ CLS (Cumulative Layout Shift): < 0.1

üõ†Ô∏è FERRAMENTAS PARA MEDIR:
‚Ä¢ Google Search Console
‚Ä¢ PageSpeed Insights
‚Ä¢ Lighthouse (Chrome DevTools)

üìä IMPACTO NO NEG√ìCIO:
‚Ä¢ +40% tr√°fego org√¢nico
‚Ä¢ Melhor posicionamento no Google
‚Ä¢ Mais cliques em redes sociais`
        },
        icon: 'üîç'
      }
    ]
  },
  
  {
    id: 'hooks-state',
    title: 'üé£ Hooks Essenciais',
    description: 'useState, useEffect e as bases do React moderno',
    backgroundColor: 'bg-gradient-to-br from-green-50 to-emerald-100',
    connections: [],
    cards: [
      {
        id: 'usestate-concept',
        title: 'useState - Gerenciando Estado',
        description: 'O hook mais fundamental para criar estado em componentes funcionais',
        category: 'hooks',
        color: 'bg-green-50 border-green-200',
        position: { x: 200, y: 150 },
        connections: ['useeffect-concept'],
        code: {
          language: 'typescript',
          example: `// useState - Estado simples e complexo
function Contador() {
  // Estados b√°sicos
  const [count, setCount] = useState(0);
  const [name, setName] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  
  // Estado de objeto (cuidado com a imutabilidade!)
  const [user, setUser] = useState({
    name: '',
    email: '',
    preferences: { theme: 'light' }
  });
  
  // ‚úÖ FORMA CORRETA de atualizar
  const incrementar = () => {
    setCount(prev => prev + 1); // Fun√ß√£o callback
  };
  
  const updateUser = (newEmail) => {
    setUser(prev => ({
      ...prev,  // Mant√©m dados existentes
      email: newEmail
    }));
  };
  
  const toggleTheme = () => {
    setUser(prev => ({
      ...prev,
      preferences: {
        ...prev.preferences,
        theme: prev.preferences.theme === 'light' ? 'dark' : 'light'
      }
    }));
  };
  
  return (
    <div>
      <p>Contador: {count}</p>
      <button onClick={incrementar}>+1</button>
      
      <input 
        value={name}
        onChange={(e) => setName(e.target.value)}
        placeholder="Digite seu nome"
      />
      
      <p>Usu√°rio: {user.email}</p>
      <p>Tema: {user.preferences.theme}</p>
    </div>
  );
}`,
          explanation: `üéì ENTENDA O useState:

üí° **CONCEITOS ESSENCIAIS**:
‚Ä¢ Hook que adiciona estado a componentes funcionais
‚Ä¢ Retorna [valor, fun√ß√£o] para ler/atualizar estado
‚Ä¢ Estado √© preservado entre re-renderiza√ß√µes
‚Ä¢ Substitui this.state dos class components

‚úÖ **BOAS PR√ÅTICAS**:

üîÑ **Use fun√ß√£o callback para atualiza√ß√µes**:
‚Ä¢ setCount(prev => prev + 1) ‚úÖ
‚Ä¢ setCount(count + 1) ‚ùå (pode ser desatualizado)

üóÇÔ∏è **Imutabilidade para objetos**:
‚Ä¢ Sempre crie novos objetos com spread operator
‚Ä¢ React compara por refer√™ncia (Object.is)
‚Ä¢ Muta√ß√£o direta n√£o dispara re-render

üéØ **Quando usar cada tipo**:
‚Ä¢ **Valores simples**: string, number, boolean
‚Ä¢ **Arrays**: lista de itens, hist√≥rico
‚Ä¢ **Objetos**: dados relacionados (user profile)
‚Ä¢ **Flags**: loading, error, success states

‚ö†Ô∏è **ARMADILHAS COMUNS**:
‚Ä¢ Nunca mute estado diretamente
        },
        icon: 'üìä'
      },
      
      {
        id: 'useeffect-concept',
        title: 'useEffect - Efeitos Colaterais',
        description: 'Hook para executar c√≥digo em resposta a mudan√ßas no componente',
        category: 'hooks',
        color: 'bg-blue-50 border-blue-200',
        position: { x: 600, y: 150 },
        connections: [],
        code: {
          language: 'typescript',
          example: \`// useEffect - Diferentes padr√µes
function UserProfile({ userId }) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(false);
  
  // Effect que executa uma vez (componentDidMount)
  useEffect(() => {
    console.log('Componente montou');
    
    // Setup inicial, timers globais, listeners
    const handleResize = () => {
      console.log('Window resized');
    };
    
    window.addEventListener('resize', handleResize);
    
    // Cleanup quando componente desmonta
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []); // Array vazio = executa s√≥ uma vez
  
  // Effect que executa quando userId muda
  useEffect(() => {
    if (!userId) return;
    
    setLoading(true);
    
    // Buscar dados do usu√°rio
    fetch(\\\`/api/users/\${userId}\\\`)
      .then(response => response.json())
      .then(userData => {
        setUser(userData);
        setLoading(false);
      })
      .catch(error => {
        console.error('Erro:', error);
        setLoading(false);
      });
  }, [userId]); // Re-executa quando userId muda
  
  // Effect sem array - executa sempre (cuidado!)
  useEffect(() => {
    document.title = user ? \\\`Perfil: \\\${user.name}\\\` : 'Carregando...';
  }); // Sem array = executa ap√≥s todo render
  
  if (loading) return <div>Carregando...</div>;
  
  return (
    <div>
      <h1>{user?.name || 'Usu√°rio n√£o encontrado'}</h1>
      <p>{user?.email}</p>
    </div>
  );
}\`,
    console.log('Componente montou');
    
    // Setup inicial, timers globais, listeners
    const handleResize = () => {
      console.log('Window resized');
    };
    
    window.addEventListener('resize', handleResize);
    
    // Cleanup quando componente desmonta
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []); // Array vazio = executa s√≥ uma vez
  
  // Effect que executa quando userId muda
  useEffect(() => {
    if (!userId) return;
    
    setLoading(true);
    
    // Buscar dados do usu√°rio
    fetch(\`/api/users/\${userId}\`)
      .then(response => response.json())
      .then(userData => {
        setUser(userData);
        setLoading(false);
      })
      .catch(error => {
        console.error('Erro:', error);
        setLoading(false);
      });
  }, [userId]); // Re-executa quando userId muda
  
  // Effect sem array - executa sempre (cuidado!)
  useEffect(() => {
    document.title = user ? \`Perfil: \${user.name}\` : 'Carregando...';
  }); // Sem array = executa ap√≥s todo render
  
  if (loading) return <div>Carregando...</div>;
  
  return (
    <div>
      <h1>{user?.name || 'Usu√°rio n√£o encontrado'}</h1>
      <p>{user?.email}</p>
    </div>
  );
}\`,
          explanation: \`üéì ENTENDA O useEffect:

‚ö° **O QUE √â**:
‚Ä¢ Hook para "efeitos colaterais" (side effects)
‚Ä¢ Executa depois que o DOM √© atualizado
‚Ä¢ Substitui componentDidMount, componentDidUpdate, componentWillUnmount
‚Ä¢ N√£o bloqueia a renderiza√ß√£o (√© ass√≠ncrono)

üìä **TR√äS PADR√ïES PRINCIPAIS**:

1Ô∏è‚É£ **useEffect(() => {}, [])** - EXECUTA UMA VEZ
   ‚Üí Equivale ao componentDidMount
   ‚Üí Ideal para: setup inicial, event listeners globais

2Ô∏è‚É£ **useEffect(() => {}, [dep1, dep2])** - EXECUTA QUANDO DEPEND√äNCIAS MUDAM
   ‚Üí Mais usado para buscar dados
   ‚Üí Re-executa quando dep1 ou dep2 mudarem

3Ô∏è‚É£ **useEffect(() => {})** - EXECUTA SEMPRE
   ‚Üí Equivale ao componentDidUpdate
   ‚Üí ‚ö†Ô∏è Cuidado: pode causar loops infinitos

‚úÖ **PRINCIPAIS USOS**:
‚Ä¢ Buscar dados de APIs
‚Ä¢ Configurar timers e intervalos
‚Ä¢ Event listeners (scroll, resize, keypress)
‚Ä¢ Atualiza√ß√µes no DOM
‚Ä¢ Cleanup de recursos

üßπ **CLEANUP (return function)**:
‚Ä¢ Executa antes do pr√≥ximo effect
‚Ä¢ Executa quando componente desmonta
‚Ä¢ Essencial para: timers, listeners, subscriptions
‚Ä¢ Previne memory leaks\`

2Ô∏è‚É£ **useEffect(() => {}, [dep1, dep2])** - EXECUTA QUANDO DEPEND√äNCIAS MUDAM
   ‚Üí Mais usado para buscar dados
   ‚Üí Re-executa quando dep1 ou dep2 mudarem

3Ô∏è‚É£ **useEffect(() => {})** - EXECUTA SEMPRE
   ‚Üí Equivale ao componentDidUpdate
   ‚Üí ‚ö†Ô∏è Cuidado: pode causar loops infinitos

‚úÖ **PRINCIPAIS USOS**:
‚Ä¢ Buscar dados de APIs
‚Ä¢ Configurar timers e intervalos
‚Ä¢ Event listeners (scroll, resize, keypress)
‚Ä¢ Atualiza√ß√µes no DOM
‚Ä¢ Cleanup de recursos

üßπ **CLEANUP (return function)**:
‚Ä¢ Executa antes do pr√≥ximo effect
‚Ä¢ Executa quando componente desmonta
‚Ä¢ Essencial para: timers, listeners, subscriptions
‚Ä¢ Previne memory leaks`
        },
        icon: '‚ö°'
      }
    ]
  }
];
